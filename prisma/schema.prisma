// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Non AI validation results
model CalculatedValidation {
  id                  String            @id @default(uuid())
  passed              Boolean
  reasoning           String
  title               String
  description         String?
  additionalDetails   Json?
  statementAnalysisId String
  statementAnalysis   StatementAnalysis @relation(fields: [statementAnalysisId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model AIValidation {
  id                  String            @id @default(uuid())
  confidence          Int               @db.SmallInt
  passed              Boolean
  reasoning           String
  title               String
  description         String?
  additionalDetails   Json?
  statementAnalysisId String
  statementAnalysis   StatementAnalysis @relation(fields: [statementAnalysisId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model StatementAnalysis {
  id                    String                 @id @default(uuid())
  s3Key                 String                 @unique
  status                String // e.g., 'PROCESSING', 'COMPLETED', 'FAILED'
  validations           AIValidation[]
  calculatedValidations CalculatedValidation[]
  bankStatement         BankStatement?         @relation(fields: [bankStatementId], references: [id])
  bankStatementId       String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model BankStatement {
  id                   String              @id @default(uuid())
  accountHolderName    String
  accountHolderAddress String[]
  startDate            DateTime
  endDate              DateTime
  accountNumber        String
  startingBalance      Float
  endingBalance        Float
  currency             String              @db.VarChar(3)
  transactions         Transaction[]
  StatementAnalysis    StatementAnalysis[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Transaction {
  id              String          @id @default(uuid())
  date            DateTime
  description     String
  amount          Float
  balance         Float?
  type            TransactionType
  bankStatementId String
  bankStatement   BankStatement   @relation(fields: [bankStatementId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum TransactionType {
  credit
  debit
}
